/* Generated By:JJTree: Do not edit this line. ExpNode.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package ast;

import semantic.ClassDescriptor;
import semantic.FieldDescriptor;
import semantic.LocalDescriptor;
import semantic.MethodDescriptor;
import semantic.ParamDescriptor;
import semantic.ProgramDescriptor;
import semantic.Symbol;
import semantic.Type;
import tac.ExpTreeNode;
import tac.TacInfo;

public
class ExpNode extends SimpleNode {
	public static ProgramDescriptor programDescriptor;
	public static ClassDescriptor currentClassDescriptor;
	public static MethodDescriptor currentMethodDescriptor;
  public ExpNode(int id) {
    super(id);
  }

  public ExpNode(XYZParser p, int id) {
    super(p, id);
  }
  
  public ExpTreeNode translate(ProgramDescriptor pd, ClassDescriptor ccd, MethodDescriptor cmd, TacInfo tacInfo){
	  ExpNode.programDescriptor = pd;
	  ExpNode.currentClassDescriptor = ccd;
	  ExpNode.currentMethodDescriptor = cmd;
	  	ExpTreeNode root = null;
	  	boolean firstSign = false;
	  	int i = 1;
	  	SimpleNode firstNode = (SimpleNode)this.jjtGetChild(0);
		if(firstNode.toString().equals("SignExpNode")){
			firstSign = true;
			firstNode = (SimpleNode)this.jjtGetChild(1);
		}
		if(firstNode.toString().equals("ConstantElementNode")){
			root = new ExpTreeNode(firstNode.getText());
		}
		else if(firstNode.toString().equals("IDElementNode")){
			root = new ExpTreeNode(firstNode.getText());
		}
		else if(firstNode.toString().equals("ArrayElementNode")){
			ArrayElementNode aen = (ArrayElementNode)firstNode;
			ExpNode arrayChildExpNode = (ExpNode)aen.jjtGetChild(0);
			root = new ExpTreeNode();
			root.arrayID = aen.getText();
			root.arrayOff = arrayChildExpNode.translate(pd, ccd, cmd, tacInfo);
			root.value_type = ExpTreeNode.ARRAY;
		}
		else if(firstNode.toString().equals("ChildExpNode")){
			ExpNode childExpNode = (ExpNode)firstNode.jjtGetChild(0);
			root = childExpNode.translate(pd, ccd, cmd, tacInfo);
		}
		else if(firstNode.toString().equals("CallExpNode")){
			CallExpNode callExpNode = (CallExpNode)firstNode;
			String objectClass = "";
			if(callExpNode.jjtGetChild(0).toString().equals("ThisNode")){
				objectClass = currentClassDescriptor.id;
			}
			else if(callExpNode.jjtGetChild(0).toString().equals("IDNode")){
				IDNode idNode = (IDNode)callExpNode.jjtGetChild(0);
				Type t = findIdType(idNode.getText());
				if(t==null){
					System.err.println("findIdType failed");
					return null;
				}
				objectClass = t.getName();
			}
			else if(callExpNode.jjtGetChild(0).toString().equals("NewExpNode")){
				NewExpNode newExpNode = (NewExpNode)callExpNode.jjtGetChild(0);
				objectClass = newExpNode.getText();
			}
			ClassDescriptor cd =  programDescriptor.classSymbolTable.symbols.get(new Symbol(objectClass));
			if(cd == null){
				System.err.println("there is no class " + objectClass);
				return null;
			}
			root = new ExpTreeNode();
			root.value_type = ExpTreeNode.CALL;
			if(callExpNode.jjtGetNumChildren()==1){
				root.method = "length[" + objectClass + "]";
			}
			else if(callExpNode.jjtGetNumChildren()==3){
				String methodName = ((SimpleNode)callExpNode.jjtGetChild(1)).getText();	//no check
				ExpListNode expListNode = (ExpListNode)callExpNode.jjtGetChild(2);
				for(int y=0;y<expListNode.jjtGetNumChildren();y++){
					ExpNode expNode = (ExpNode)expListNode.jjtGetChild(y);
					ExpTreeNode param = (ExpTreeNode)expNode.translate(pd, ccd, cmd, tacInfo);
					root.params.add(param.translate(tacInfo));
				}
				root.method = methodName + "[" + objectClass + "]";
			}
		}
		if(firstSign){
			root = new ExpTreeNode(ExpTreeNode.SIGN, root);
			i++;
		}
		
		int expNum = this.jjtGetNumChildren();
		if(expNum==i){
			//do nothing
		}
		else{
			SimpleNode oneNode = (SimpleNode)this.jjtGetChild(i);
			SimpleNode rightNode = null;
			ExpTreeNode rightTreeNode = null;
			while(i < expNum && oneNode.toString().equals("MultiExpNode")){
				rightNode = (SimpleNode)oneNode.jjtGetChild(0);
				boolean rightSign = false;
				
				if(rightNode.toString().equals("SignExpNode")){
					rightSign = true;
					rightNode = (SimpleNode)oneNode.jjtGetChild(1);
				}
				if(rightNode.toString().equals("ConstantElementNode")){
					rightTreeNode = new ExpTreeNode(rightNode.getText());
				}
				else if(rightNode.toString().equals("IDElementNode")){
					rightTreeNode = new ExpTreeNode(rightNode.getText());
				}
				else if(rightNode.toString().equals("ArrayElementNode")){
					ArrayElementNode aen = (ArrayElementNode)rightNode;
					ExpNode arrayChildExpNode = (ExpNode)aen.jjtGetChild(0);
					
					rightTreeNode = new ExpTreeNode();
					rightTreeNode.arrayID = aen.getText();
					rightTreeNode.arrayOff = arrayChildExpNode.translate(pd, ccd, cmd, tacInfo);
					rightTreeNode.value_type = ExpTreeNode.ARRAY;
				}
				else if(rightNode.toString().equals("ChildExpNode")){
					ExpNode oneChildExpNode = (ExpNode)rightNode.jjtGetChild(0);
					rightTreeNode = oneChildExpNode.translate(pd, ccd, cmd, tacInfo);
				}
				else if(rightNode.toString().equals("CallExpNode")){
					CallExpNode callExpNode = (CallExpNode)rightNode;
					String objectClass = "";
					if(callExpNode.jjtGetChild(0).toString().equals("ThisNode")){
						objectClass = currentClassDescriptor.id;
					}
					else if(callExpNode.jjtGetChild(0).toString().equals("IDNode")){
						IDNode idNode = (IDNode)callExpNode.jjtGetChild(0);
						Type t = findIdType(idNode.getText());
						if(t==null){
							System.err.println("findIdType failed");
							return null;
						}
						objectClass = t.getName();
					}
					else if(callExpNode.jjtGetChild(0).toString().equals("NewExpNode")){
						NewExpNode newExpNode = (NewExpNode)callExpNode.jjtGetChild(0);
						objectClass = newExpNode.getText();
					}
					ClassDescriptor cd =  programDescriptor.classSymbolTable.symbols.get(new Symbol(objectClass));
					if(cd == null){
						System.err.println("there is no class " + objectClass);
						return null;
					}
					rightTreeNode = new ExpTreeNode();
					rightTreeNode.value_type = ExpTreeNode.CALL;
					if(callExpNode.jjtGetNumChildren()==1){
						rightTreeNode.method = "length[" + objectClass + "]";
					}
					else if(callExpNode.jjtGetNumChildren()==3){
						String methodName = ((SimpleNode)callExpNode.jjtGetChild(1)).getText();	//no check
						ExpListNode expListNode = (ExpListNode)callExpNode.jjtGetChild(2);
						for(int x=0;x<expListNode.jjtGetNumChildren();x++){
							ExpNode expNode = (ExpNode)expListNode.jjtGetChild(x);
							ExpTreeNode param = (ExpTreeNode)expNode.translate(pd, ccd, cmd, tacInfo);
							rightTreeNode.params.add(param.translate(tacInfo));
						}
						rightTreeNode.method = methodName + "[" + objectClass + "]";
					}
				}
				if(rightSign){
					rightTreeNode = new ExpTreeNode(ExpTreeNode.SIGN, rightTreeNode);
					i++;
				}
				root = ExpTreeNode.add(root, rightTreeNode, ExpTreeNode.MULTIPLE);
				
				i++;
				oneNode = (SimpleNode)this.jjtGetChild(i);
			}
			if(i < expNum){
				ExpTreeNode addRoot = null;
				SimpleNode addFirstNode = null;
				for(;i<expNum;i++){
					int j=1;
					boolean addFirstSign = false;
					oneNode = (SimpleNode)this.jjtGetChild(i);
					addFirstNode = (SimpleNode)oneNode.jjtGetChild(0);
					if(addFirstNode.toString().equals("SignExpNode")){
						addFirstSign = true;
						addFirstNode = (SimpleNode)oneNode.jjtGetChild(1);
					}
					if(addFirstNode.toString().equals("ConstantElementNode")){
						addRoot = new ExpTreeNode(addFirstNode.getText());
					}
					else if(addFirstNode.toString().equals("IDElementNode")){
						addRoot = new ExpTreeNode(addFirstNode.getText());
					}
					else if(addFirstNode.toString().equals("ArrayElementNode")){
						ArrayElementNode aen = (ArrayElementNode)addFirstNode;
						ExpNode arrayChildExpNode = (ExpNode)aen.jjtGetChild(0);
						
						addRoot = new ExpTreeNode();
						addRoot.arrayID = aen.getText();
						addRoot.arrayOff = arrayChildExpNode.translate(pd, ccd, cmd, tacInfo);
						addRoot.value_type = ExpTreeNode.ARRAY;
						
					}
					else if(addFirstNode.toString().equals("ChildExpNode")){
						ExpNode addFirstChildExpNode = (ExpNode)addFirstNode.jjtGetChild(0);
						addRoot = addFirstChildExpNode.translate(pd, ccd, cmd, tacInfo);
					}
					else if(addFirstNode.toString().equals("CallExpNode")){
						CallExpNode callExpNode = (CallExpNode)addFirstNode;
						String objectClass = "";
						if(callExpNode.jjtGetChild(0).toString().equals("ThisNode")){
							objectClass = currentClassDescriptor.id;
						}
						else if(callExpNode.jjtGetChild(0).toString().equals("IDNode")){
							IDNode idNode = (IDNode)callExpNode.jjtGetChild(0);
							Type t = findIdType(idNode.getText());
							if(t==null){
								System.err.println("findIdType failed");
								return null;
							}
							objectClass = t.getName();
						}
						else if(callExpNode.jjtGetChild(0).toString().equals("NewExpNode")){
							NewExpNode newExpNode = (NewExpNode)callExpNode.jjtGetChild(0);
							objectClass = newExpNode.getText();
						}
						ClassDescriptor cd =  programDescriptor.classSymbolTable.symbols.get(new Symbol(objectClass));
						if(cd == null){
							System.err.println("there is no class " + objectClass);
							return null;
						}
						addRoot = new ExpTreeNode();
						addRoot.value_type = ExpTreeNode.CALL;
						if(callExpNode.jjtGetNumChildren()==1){
							addRoot.method = "length[" + objectClass + "]";
						}
						else if(callExpNode.jjtGetNumChildren()==3){
							String methodName = ((SimpleNode)callExpNode.jjtGetChild(1)).getText();	//no check
							ExpListNode expListNode = (ExpListNode)callExpNode.jjtGetChild(2);
							for(int k=0;k<expListNode.jjtGetNumChildren();k++){
								ExpNode expNode = (ExpNode)expListNode.jjtGetChild(k);
								ExpTreeNode param = (ExpTreeNode)expNode.translate(pd, ccd, cmd, tacInfo);
								addRoot.params.add(param.translate(tacInfo));
							}
							addRoot.method = methodName + "[" + objectClass + "]";
						}
					}
					if(addFirstSign){
						addRoot = new ExpTreeNode(ExpTreeNode.SIGN, addRoot);
						j++;
					}
					
					if(oneNode.jjtGetNumChildren()>1){
						SimpleNode multiNode = null;
						SimpleNode multiRightNode = null;
						ExpTreeNode multiRightTreeNode = null;
						for(;j<oneNode.jjtGetNumChildren();j++){
							boolean multiRightSign = false;
							multiNode = (SimpleNode)oneNode.jjtGetChild(j);
							multiRightNode = (SimpleNode)multiNode.jjtGetChild(0);
							
							if(multiRightNode.toString().equals("SignExpNode")){
								multiRightSign = true;
								multiRightNode = (SimpleNode)multiNode.jjtGetChild(1);
							}
							if(multiRightNode.toString().equals("ConstantElementNode")){
								multiRightTreeNode = new ExpTreeNode(multiRightNode.getText());
							}
							else if(multiRightNode.toString().equals("IDElementNode")){
								multiRightTreeNode = new ExpTreeNode(multiRightNode.getText());
							}
							else if(multiRightNode.toString().equals("ArrayElementNode")){
								ArrayElementNode aen = (ArrayElementNode)multiRightNode;
								ExpNode arrayChildExpNode = (ExpNode)aen.jjtGetChild(0);
								
								multiRightTreeNode = new ExpTreeNode();
								multiRightTreeNode.arrayID = aen.getText();
								multiRightTreeNode.arrayOff = arrayChildExpNode.translate(pd, ccd, cmd, tacInfo);
								multiRightTreeNode.value_type = ExpTreeNode.ARRAY;
							}
							else if(multiRightNode.toString().equals("ChildExpNode")){
								ExpNode oneMultiChildExpNode = (ExpNode)multiRightNode.jjtGetChild(0);
								multiRightTreeNode =  oneMultiChildExpNode.translate(pd, ccd, cmd, tacInfo);
							}
							else if(multiRightNode.toString().equals("CallExpNode")){
								CallExpNode callExpNode = (CallExpNode)multiRightNode;
								String objectClass = "";
								if(callExpNode.jjtGetChild(0).toString().equals("ThisNode")){
									objectClass = currentClassDescriptor.id;
								}
								else if(callExpNode.jjtGetChild(0).toString().equals("IDNode")){
									IDNode idNode = (IDNode)callExpNode.jjtGetChild(0);
									Type t = findIdType(idNode.getText());
									if(t==null){
										System.err.println("findIdType failed");
										return null;
									}
									objectClass = t.getName();
								}
								else if(callExpNode.jjtGetChild(0).toString().equals("NewExpNode")){
									NewExpNode newExpNode = (NewExpNode)callExpNode.jjtGetChild(0);
									objectClass = newExpNode.getText();
								}
								ClassDescriptor cd =  programDescriptor.classSymbolTable.symbols.get(new Symbol(objectClass));
								if(cd == null){
									System.err.println("there is no class " + objectClass);
									return null;
								}
								multiRightTreeNode = new ExpTreeNode();
								multiRightTreeNode.value_type = ExpTreeNode.CALL;
								if(callExpNode.jjtGetNumChildren()==1){
									multiRightTreeNode.method = "length[" + objectClass + "]";
								}
								else if(callExpNode.jjtGetNumChildren()==3){
									String methodName = ((SimpleNode)callExpNode.jjtGetChild(1)).getText();	//no check
									ExpListNode expListNode = (ExpListNode)callExpNode.jjtGetChild(2);
									for(int x=0;x<expListNode.jjtGetNumChildren();x++){
										ExpNode expNode = (ExpNode)expListNode.jjtGetChild(x);
										ExpTreeNode param = (ExpTreeNode)expNode.translate(pd, ccd, cmd, tacInfo);
										multiRightTreeNode.params.add(param.translate(tacInfo));
									}
									multiRightTreeNode.method = methodName + "[" + objectClass + "]";
								}
							}
							
							if(multiRightSign){
								multiRightTreeNode = new ExpTreeNode(ExpTreeNode.SIGN, multiRightTreeNode);
								j++;
							}
							addRoot = ExpTreeNode.add(addRoot, multiRightTreeNode, ExpTreeNode.MULTIPLE);
						}
					}
					if(oneNode.toString().equals("AddExpNode")){
						root = ExpTreeNode.add(root, addRoot, ExpTreeNode.PLUS);
					}
					else if(oneNode.toString().equals("MinusExpNode")){
						root = ExpTreeNode.add(root, addRoot, ExpTreeNode.MINUS);
					}
				}
			}
			else{
				//do nothing
			}
		}
		return root;  //?????????????????????????????????????????????????
  }
  
  private static Type findIdType(String id) {
		if (currentMethodDescriptor != null) {
			// first refer to local symbol table
			LocalDescriptor localDesc = currentMethodDescriptor.localSymbolTable
					.getDescriptor(id);
			if (localDesc != null) {
				Type type = Type.findTypeByName(localDesc.typename);
				// if(type==null){
				// }
				return type;

			}

			// then refer to param symbol table
			else {
				ParamDescriptor paramDesc = currentMethodDescriptor.parameterSymbolTable
						.getDescriptor(id);
				if (paramDesc != null) {
					Type type = Type.findTypeByName(paramDesc.typename);
					return type;
				}

				// then refer to class field symbol table
				else {
					FieldDescriptor fieldDesc = currentClassDescriptor.fieldSymbolTable
							.getDescriptor(id);
					if (fieldDesc != null) {
						Type type = Type.findTypeByName(fieldDesc.typename);
						return type;
					} else {
						String undefinedInfo = "Undefined symbol " + id + " in method "+
										currentMethodDescriptor.id+ " class " + 
										currentClassDescriptor.id+";\n";
						System.err.println("Undefined symbol " + id + ";\n");
					}
				}
			}
		}
		return null;
	}


  /** Accept the visitor. **/
  public Object jjtAccept(XYZParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=ebe6582f1d10d95670c7cc91ce9223d0 (do not edit this line) */
