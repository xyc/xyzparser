package parser;
/* Generated By:JavaCC: Do not edit this line. XYZParser.java */

import java.io.*;
import java.util.*;

/** XYZParser. */
public class XYZParser implements XYZParserConstants {
	public static ArrayList<ErrorMessage> errors = null;
    private static ArrayList<Token> tokens = new ArrayList<Token>();
    public static String output;
  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
	  try{
	        File file = new File("test.xyz");
	        FileInputStream stream = new FileInputStream(file);
	        XYZParser parser = new XYZParser(stream);
	        parser.lexicalAnalyze();
	        stream.close();
	        System.out.println("there are "+errors.size()+" errors");
	        for (int i = 0; i < errors.size(); i++) {
	        	System.out.print("Error: "+(i+1)+" line "+errors.get(i).getErrorLine());
	        	System.out.println(", Column "+errors.get(i).getErrorColumn());
	        	System.out.println("\t errorMessage: "+errors.get(i).getErrorMessage());
	        	
	        }
	        System.out.println("end");

	        /*stream = new FileInputStream(file);
	        parser.ReInit(stream);
	        parser.outputStatisticsFile();*/
	        }catch(Exception e){
	        	e.printStackTrace();
	        }
	      }

/** Root production. */
  static final public void lexicalAnalyze() throws ParseException {
	  errors = new ArrayList<ErrorMessage>();
      tokens.clear();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPER:
      case KEYWORD:
      case SIGN:
      case INTLITERAL:
      case REALLITERAL:
      case ID:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTLITERAL:
        jj_consume_token(INTLITERAL);
        break;
      case REALLITERAL:
        jj_consume_token(REALLITERAL);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      case KEYWORD:
        jj_consume_token(KEYWORD);
        break;
      case SIGN:
        jj_consume_token(SIGN);
        break;
      case OPER:
        jj_consume_token(OPER);
        break;
      case COMMENT:
        jj_consume_token(COMMENT);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public void outputStatisticsFile() throws ParseException {
 Token t;
 HashMap<String,Integer> hash = new HashMap<String,Integer>();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPER:
      case KEYWORD:
      case SIGN:
      case INTLITERAL:
      case REALLITERAL:
      case ID:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPER:
        jj_consume_token(OPER);
        break;
      case SIGN:
        jj_consume_token(SIGN);
        break;
      case KEYWORD:
        t = jj_consume_token(KEYWORD);
        if(hash.containsKey(t.image))
                hash.put(t.image,hash.get(t.image)+1);
        else
                        hash.put(t.image,1);
        break;
      case ID:
        t = jj_consume_token(ID);
        if(hash.containsKey(t.image))
                hash.put(t.image,hash.get(t.image)-1);
        else
                        hash.put(t.image,-1);
        break;
      case INTLITERAL:
        jj_consume_token(INTLITERAL);
        break;
      case REALLITERAL:
        jj_consume_token(REALLITERAL);
        break;
      case COMMENT:
          jj_consume_token(COMMENT);
          break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        try{
                File outfile = new File("output.txt");
                FileOutputStream ofstream = new FileOutputStream(outfile);
                PrintStream p = new PrintStream( ofstream );
                Set<String> s = hash.keySet();

                output = "";
            output += "KEYWORD:\n";

            for(String sa: s){
                    if(hash.get(sa)>0){
                            output += sa+"  "+ hash.get(sa) + "\n";
                    }
            }
            output += "\r\rID:\n";
            for(String sa: s){
                    if(hash.get(sa)<0){
                            output += sa+"  "+(-hash.get(sa)) + "\n";
                    }
            }
            p.println(output);
        }
        catch(FileNotFoundException e){
                e.printStackTrace();
        }
        catch(IOException e){
                e.printStackTrace();
        }
  }

  static private boolean jj_initialized_once = false;
  static public XYZParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2000,0x2000,0x2000,0x2000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x11e008,0x11e008,0x1e008,0x1e008,};
   }

  public XYZParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public XYZParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XYZParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public XYZParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XYZParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public XYZParser(XYZParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public void ReInit(XYZParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if(token.kind==XYZParserConstants.KEYWORD||token.kind==XYZParserConstants.COMMENT
    		  ||token.kind==XYZParserConstants.INTLITERAL||token.kind==XYZParserConstants.REALLITERAL
    		  ||token.kind==XYZParserConstants.OPER){
    	  tokens.add(token);
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[53];
    for (int i = 0; i < 53; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }
  
  static final public ArrayList<ErrorMessage> getErrors() {
	return errors;
  }
	
  static final public void setErrors(ArrayList<ErrorMessage> errors) {
	XYZParser.errors = errors;
  }
	
  static final public void addError(ErrorMessage error) {
	errors.add(error);
  }

   public static ArrayList<Token> getTokens() {
        return tokens;
    }

   public static void setTokens(ArrayList<Token> tokens) {
        XYZParser.tokens = tokens;
    }

}
